package api

/************************************************
  generated by IDE. for [IPAddressAPI]
************************************************/

import (
	"github.com/yamamoto-febc/libsacloud/sacloud"
)

/************************************************
   To support influent interface for Find()
************************************************/

func (api *IPAddressAPI) Reset() *IPAddressAPI {
	api.reset()
	return api
}

func (api *IPAddressAPI) Offset(offset int) *IPAddressAPI {
	api.offset(offset)
	return api
}

func (api *IPAddressAPI) Limit(limit int) *IPAddressAPI {
	api.limit(limit)
	return api
}

func (api *IPAddressAPI) Include(key string) *IPAddressAPI {
	api.include(key)
	return api
}

func (api *IPAddressAPI) Exclude(key string) *IPAddressAPI {
	api.exclude(key)
	return api
}

func (api *IPAddressAPI) FilterBy(key string, value interface{}) *IPAddressAPI {
	api.filterBy(key, value, false)
	return api
}

// func (api *IPAddressAPI) FilterMultiBy(key string, value interface{}) *IPAddressAPI {
// 	api.filterBy(key, value, true)
// 	return api
// }

//func (api *IPAddressAPI) WithNameLike(name string) *IPAddressAPI {
//	return api.FilterBy("Name", name)
//}

//func (api *IPAddressAPI) WithTag(tag string) *IPAddressAPI {
//	return api.FilterBy("Tags.Name", tag)
//}
//func (api *IPAddressAPI) WithTags(tags []string) *IPAddressAPI {
//	return api.FilterBy("Tags.Name", []interface{}{tags})
//}
//
//func (api *IPAddressAPI) WithSizeGib(size int) *IPAddressAPI {
//	api.FilterBy("SizeMB", size*1024)
//	return api
//}
//
//func (api *IPAddressAPI) WithSharedScope() *IPAddressAPI {
//	api.FilterBy("Scope", "shared")
//	return api
//}
//
//func (api *IPAddressAPI) WithUserScope() *IPAddressAPI {
//	api.FilterBy("Scope", "user")
//	return api
//}

func (api *IPAddressAPI) SortBy(key string, reverse bool) *IPAddressAPI {
	api.sortBy(key, reverse)
	return api
}

func (api *IPAddressAPI) SortByName(reverse bool) *IPAddressAPI {
	api.sortByName(reverse)
	return api
}

//func (api *IPAddressAPI) SortBySize(reverse bool) *IPAddressAPI {
//	api.sortBy("SizeMB", reverse)
//	return api
//}

/************************************************
  To support CRUD(Create/Read/Update/Delete)
************************************************/

//func (api *IPAddressAPI) Create(value *sacloud.IPAddress) (*sacloud.IPAddress, error) {
//	return api.request(func(res *sacloud.Response) error {
//		return api.create(api.createRequest(value), res)
//	})
//}

//func (api *IPAddressAPI) Read(id int64) (*sacloud.IPAddress, error) {
//	return api.request(func(res *sacloud.Response) error {
//		return api.read(id, nil, res)
//	})
//}

//func (api *IPAddressAPI) Update(id int64, value *sacloud.IPAddress) (*sacloud.IPAddress, error) {
//	return api.request(func(res *sacloud.Response) error {
//		return api.update(id, api.createRequest(value), res)
//	})
//}
//
//func (api *IPAddressAPI) Delete(id int64) (*sacloud.IPAddress, error) {
//	return api.request(func(res *sacloud.Response) error {
//		return api.delete(id, nil, res)
//	})
//}
//
//func (api *IPAddressAPI) New() *sacloud.IPAddress {
//	return &sacloud.IPAddress{
//		TagsType: &sacloud.TagsType{},
//	}
//}

/************************************************
  Inner functions
************************************************/

func (api *IPAddressAPI) setStateValue(setFunc func(*sacloud.Request)) *IPAddressAPI {
	api.baseAPI.setStateValue(setFunc)
	return api
}

func (api *IPAddressAPI) request(f func(*sacloud.Response) error) (*sacloud.IPAddress, error) {
	res := &sacloud.Response{}
	err := f(res)
	if err != nil {
		return nil, err
	}
	return res.IPAddress, nil
}

func (api *IPAddressAPI) createRequest(value *sacloud.IPAddress) *sacloud.Request {
	req := &sacloud.Request{}
	req.IPAddress = value
	return req
}
